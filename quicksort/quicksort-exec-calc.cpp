#include <iostream>
#include <utility>
#include <sys/time.h>
#include <iomanip>
using namespace std;

// Function protoytpes
int partition(int arr[], int start, int end);
void quickSort(int arr[], int start, int end);

// Main function
int main() {
    int arr[1000] = {258, 252, 486, 484, 412, 92, 209, 429, 300, 695, 179, 617, 297, 598, 866, 693, 757, 272, 601, 940, 803, 13, 340, 587, 266, 605, 706, 303, 77, 31, 128, 489, 267, 226, 4, 443, 364, 74, 358, 345, 915, 282, 341, 259, 729, 946, 372, 109, 849, 894, 46, 591, 965, 223, 237, 636, 381, 206, 930, 891, 98, 360, 327, 804, 964, 57, 529, 279, 400, 406, 876, 781, 832, 152, 148, 748, 317, 705, 359, 834, 599, 709, 201, 536, 786, 415, 234, 399, 613, 872, 432, 501, 994, 111, 963, 958, 353, 669, 117, 126, 81, 278, 449, 369, 794, 409, 898, 122, 451, 34, 633, 487, 573, 473, 547, 737, 103, 19, 820, 990, 874, 609, 332, 569, 842, 582, 778, 482, 559, 139, 836, 194, 784, 532, 544, 442, 518, 491, 356, 731, 15, 661, 50, 305, 242, 147, 886, 841, 496, 417, 153, 913, 592, 253, 512, 328, 819, 576, 121, 313, 859, 375, 750, 368, 783, 769, 423, 205, 260, 760, 88, 625, 483, 875, 458, 225, 294, 30, 178, 261, 724, 41, 936, 853, 171, 142, 52, 897, 751, 716, 974, 651, 993, 410, 920, 657, 857, 438, 814, 271, 7, 56, 188, 608, 677, 537, 499, 90, 348, 383, 736, 879, 571, 927, 911, 427, 521, 24, 755, 999, 749, 452, 292, 852, 270, 641, 631, 141, 402, 823, 975, 319, 10, 80, 21, 588, 296, 86, 502, 924, 251, 756, 644, 686, 596, 401, 566, 800, 762, 437, 433, 654, 595, 374, 493, 779, 726, 54, 421, 419, 676, 666, 298, 593, 284, 801, 923, 689, 408, 885, 638, 55, 878, 154, 36, 306, 79, 808, 468, 184, 459, 846, 314, 431, 48, 948, 953, 165, 275, 660, 708, 257, 346, 338, 620, 672, 479, 785, 89, 149, 655, 535, 658, 743, 907, 218, 322, 47, 802, 789, 771, 58, 509, 902, 542, 331, 824, 703, 156, 577, 966, 904, 283, 667, 627, 765, 311, 957, 230, 793, 568, 763, 720, 308, 136, 829, 831, 130, 32, 970, 624, 888, 485, 863, 70, 53, 711, 367, 929, 123, 921, 759, 255, 570, 621, 856, 490, 169, 196, 615, 212, 978, 822, 67, 166, 262, 461, 125, 133, 248, 76, 735, 463, 269, 610, 45, 914, 766, 14, 967, 371, 557, 811, 721, 467, 698, 901, 862, 909, 515, 997, 382, 727, 379, 659, 699, 391, 519, 428, 791, 453, 11, 830, 170, 448, 813, 954, 108, 531, 44, 350, 101, 138, 211, 747, 185, 347, 687, 742, 572, 597, 137, 94, 84, 983, 504, 939, 299, 163, 113, 447, 663, 807, 835, 616, 293, 265, 3, 370, 65, 233, 740, 520, 717, 883, 996, 434, 287, 560, 342, 155, 210, 440, 632, 812, 526, 600, 539, 586, 767, 938, 116, 956, 91, 826, 922, 860, 851, 236, 908, 29, 200, 603, 164, 806, 23, 241, 602, 545, 947, 679, 403, 900, 150, 865, 683, 435, 561, 203, 700, 376, 63, 393, 26, 310, 8, 704, 805, 795, 652, 673, 43, 249, 476, 354, 989, 71, 514, 384, 952, 895, 214, 941, 971, 782, 474, 162, 195, 774, 753, 177, 336, 73, 998, 579, 18, 855, 987, 323, 69, 274, 604, 903, 316, 281, 105, 22, 290, 228, 62, 540, 525, 690, 839, 541, 951, 424, 107, 33, 127, 386, 810, 506, 656, 594, 477, 745, 522, 243, 318, 649, 204, 935, 224, 285, 816, 245, 418, 394, 289, 339, 85, 337, 160, 815, 172, 505, 397, 455, 848, 754, 643, 882, 563, 618, 146, 629, 439, 61, 945, 93, 329, 83, 818, 546, 481, 925, 606, 554, 396, 741, 864, 315, 362, 949, 896, 772, 460, 688, 478, 671, 583, 441, 634, 664, 140, 838, 790, 787, 905, 985, 912, 466, 847, 628, 854, 100, 744, 796, 238, 291, 280, 176, 694, 254, 681, 585, 590, 827, 398, 388, 614, 167, 276, 538, 187, 326, 27, 135, 580, 1, 722, 330, 528, 732, 495, 445, 450, 960, 718, 899, 551, 416, 25, 124, 497, 414, 981, 558, 821, 500, 469, 562, 229, 916, 197, 530, 612, 420, 665, 982, 72, 797, 934, 825, 503, 619, 60, 202, 942, 917, 312, 933, 395, 344, 59, 533, 217, 517, 675, 411, 581, 75, 637, 173, 508, 919, 752, 42, 567, 955, 232, 110, 471, 351, 728, 959, 213, 288, 87, 492, 642, 35, 216, 833, 730, 589, 950, 674, 837, 565, 986, 286, 182, 534, 263, 809, 780, 880, 426, 773, 961, 131, 219, 465, 422, 99, 798, 734, 877, 215, 668, 96, 488, 944, 828, 198, 861, 552, 527, 413, 498, 28, 151, 208, 425, 114, 670, 134, 78, 181, 639, 858, 611, 680, 943, 691, 715, 392, 584, 129, 622, 480, 995, 516, 118, 0, 892, 385, 389, 992, 712, 739, 799, 273, 102, 768, 343, 119, 373, 524, 692, 20, 511, 932, 543, 575, 333, 868, 710, 972, 457, 678, 723, 192, 550, 112, 38, 906, 157, 227, 775, 607, 887, 792, 553, 168, 979, 725, 647, 235, 220, 378, 193, 881, 325, 770, 549, 335, 574, 630, 363, 221, 873, 180, 2, 430, 357, 702, 746, 470, 231, 984, 926, 380, 738, 867, 962, 650, 869, 97, 623, 626, 239, 436, 444, 366, 507, 145, 513, 304, 174, 302, 120, 910, 199, 143, 405, 404, 144, 191, 682, 456, 980, 222, 648, 309, 161, 696, 132, 240, 454, 817, 158, 976, 850, 843, 713, 893, 244, 653, 870, 988, 685, 321, 64, 969, 635, 764, 37, 361, 390, 247, 256, 12, 523, 890, 777, 472, 268, 82, 968, 719, 446, 365, 510, 564, 991, 640, 115, 186, 250, 9, 684, 264, 355, 377, 49, 189, 844, 175, 51, 646, 840, 464, 246, 937, 918, 352, 977, 758, 6, 494, 334, 871, 662, 68, 207, 475, 66, 733, 17, 928, 5, 578, 190, 39, 556, 106, 701, 183, 788, 104, 277, 889, 324, 320, 16, 776, 40, 697, 931, 555, 707, 307, 159, 884, 714, 973, 407, 295, 301, 645, 548, 462, 387, 761, 95, 845, 349};
    int size = sizeof(arr) / sizeof(arr[0]);

    struct timeval begin, end;

    // Start measuring the time
    gettimeofday(&begin, 0);

    // Call the function
    quickSort(arr, 0, size-1);

    // Stop measuring the time
    gettimeofday(&end, 0);
    
    cout << "Quick sorted: [";
    for(int i = 0; i < size; i++) {
        // When reached the latest element, don't print the ","
        (i == size-1)
            ?cout << arr[i] << "]"
            :cout << arr[i] << ", ";
    }

    long long seconds = end.tv_sec - begin.tv_sec;
    long long microseconds = end.tv_usec - begin.tv_usec;
    long double elapsed = seconds*1000 + microseconds*1e-3;
    cout << "\n\nThe execution time is " << setprecision(10) << elapsed << " milliseconds";

    return 0;
}

// Function implementation
int partition(int arr[], int start, int end) {
    int pivot = arr[end];
    int i = start - 1;

    for(int j = start; j < end; j++) {
        if(arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }

    swap(arr[i+1], arr[end]);
    return (i+1);
}

void quickSort(int arr[], int start, int end) {
    if(start < end) {
        int pivot = partition(arr, start, end);
        quickSort(arr, start, pivot-1);
        quickSort(arr, pivot+1, end);
    }
}
